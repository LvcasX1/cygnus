#! /bin/bash

#Text colors
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`

#Text mode commands
bold=`tput bold`
underline=`tput smul`
removeUnderline=`tput rmul`
standout=`tput smso`
exitStandout=`tput rmso`
reset=`tput sgr 0`
bell=`tput bel`

userAction=$1
userElement=$2

#create new project
createProject () {
  # set project's name
  echo ""
  read -p "${yellow}${underline}Enter project's name${removeUnderline}: ${reset}" projectName

  if [ -d "${projectName}" ]
  then
    echo "${red}${bold}A project with that name already exists! Please choose another name${reset}"
    exit 1
  else
    echo
    echo "${yellow}${bold}Creating ${projectName}"
    echo
 
    mkdir "${projectName}" 
    projectPath="$_"

    touch "${projectName}/.cygnus"

    cp -R "$HOME/.cygnus/templates/project/" "${projectName}"
    eval `sed -i '' "s/cygnus-base-project/${projectName}/g" ${projectPath}/package.json`

    # output project's structure
    echo 
    find $projectPath | sed -e " s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/" -e "s/\([a-zA-Z._*-]\)/${bold}${green}&${reset}/g"
    echo
    echo "${bold}${green}${standout}Instructions to run your project: ${reset}"
    echo
    echo "${yellow}Run: ${green}npm i${reset}"
    echo "${yellow}Then start project with: ${green}npm run start-dev${reset}"
    echo
  fi
}

createController () {
  # set controller's name
  echo
  read -p "${yellow}${underline}Enter camel case controller's name${removeUnderline}: ${reset}" controllerName
  
  applicationLayerPath="src/application"
  controllersPath="${applicationLayerPath}/controllers"
  formattedControllerName=`echo "${controllerName}" | sed "s/\(.\)\([A-Z]\)/\1-\2/g" | tr "[:upper:]" "[:lower:]"`
  echo $formattedControllerName

  # copy template file to project's path
  mkdir "${controllersPath}/${formattedControllerName}"
  cp "$HOME/.cygnus/templates/files/controller.ts" "${controllersPath}/${formattedControllerName}/${formattedControllerName}.controller.ts"
  eval `sed -i '' "s/BaseController/${controllerName}Controller/g" ${controllersPath}/${formattedControllerName}/${formattedControllerName}.controller.ts`

  # update controllers list at controllers index file
  eval `grep -q "\[[a-zA-Z]" ${applicationLayerPath}/controllers/index.ts && sed -i '' "s/\]/, ${controllerName}Controller\]/g" ${applicationLayerPath}/controllers/index.ts`
  eval `grep -q "\[\]" ${applicationLayerPath}/controllers/index.ts && sed -i '' "s/\]/${controllerName}Controller\]/g" ${applicationLayerPath}/controllers/index.ts`

  newControllerImportStatement="import \{ ${controllerName}Controller \} from \'\.\/${formattedControllerName}\/${formattedControllerName}\.controller\'"
  eval `sed -i '' '1,/^$/s/^$/importstatement\'$'\n/g' ${applicationLayerPath}/controllers/index.ts && sed -i '' "s/importstatement/${newControllerImportStatement}/g" ${applicationLayerPath}/controllers/index.ts`

  echo "${yellow}${bold}${controllerName} controller created!${reset}"
}

if [ $userAction == 'new' ]
then
  if [ $userElement == 'project' ]
  then
    createProject
    exit 1
  else
    echo "${red}${bold}Invalid option, please enter -h to get help!${reset}"
    exit 1
  fi
elif [ $userAction == 'create' ]
then
  if [ ! -f '.cygnus' ]
  then
    echo "Invalid project path, please move to a valid Cygnus project root path"
  else
    if [ $userElement == 'controller' ]
    then
      createController
      exit 1
    else
      echo "${red}${bold}Invalid option, plase enter -h to get help!${reset}"
      exit 1
    fi
  fi
elif [[ $userAction == "-h" || $userAction == "--help" ]]
then
  eval "sh ${HOME}/.cygnus/.help"
  exit 1
else
  echo "${red}${bold}Invalid cygnus option${reset}"
  exit 1
fi
